#include <engine/audio/SoundListener.h>
#include "SoundListenerSystem.h"

namespace Carrot::ECS {
    SoundListenerSystem::SoundListenerSystem(Carrot::ECS::World& world)
            : Carrot::ECS::LogicSystem<Carrot::ECS::TransformComponent, Carrot::ECS::SoundListenerComponent>(world) {
        // TODO: autogenerated
    }

    void SoundListenerSystem::tick(double dt) {
        forEachEntity([&](const Carrot::ECS::Entity& entity, const TransformComponent& transform, const SoundListenerComponent& soundListener) {
            if(!soundListener.active) {
                return;
            }

            Carrot::Audio::SoundListener::updatePosition(transform.computeFinalPosition());
        });
    }

    void SoundListenerSystem::onFrame(const Carrot::Render::Context& renderContext) {}

    std::unique_ptr <Carrot::ECS::System> SoundListenerSystem::duplicate(Carrot::ECS::World& newWorld) const {
        std::unique_ptr<SoundListenerSystem> result = std::make_unique<SoundListenerSystem>(newWorld);
        return result;
    }
}